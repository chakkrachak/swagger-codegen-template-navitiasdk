package org.kisio.NavitiaSDK;

import com.squareup.okhttp.Call;
import org.junit.Test;
import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.models.PlacesResponse;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class NavitiaSDKTest {
    @Test
    public void shouldInstantiateGivenValidConfiguration() throws Exception {
        NavitiaSDK navitiaSDK = new NavitiaSDK(new NavitiaConfiguration("takotak"));

        assertNotNull(navitiaSDK);
        assertNotNull(navitiaSDK.getConfiguration());
        assertEquals("takotak", navitiaSDK.getConfiguration().getToken());
        assertNotNull(navitiaSDK.getEndpoints());
        assertNotNull(navitiaSDK.getEndpoints().getPlacesApi());
        assertNotNull(navitiaSDK.getFeatures());
    }

    @Test
    public void shouldRetrieveEndpointPlacesResultsGivenValidConfigurationWithGeneratedSyncRequester() throws Exception {
        NavitiaSDK navitiaSDK = new NavitiaSDK(new NavitiaConfiguration("9e304161-bb97-4210-b13d-c71eaf58961c"));

        String q = "gare";
        List<String> type = null;
        Integer count = 10;
        Integer searchType = null;
        List<String> adminUri = null;
        Integer depth = null;
        Boolean disableGeojson = null;
        String from = null;
        String shape = null;
        PlacesResponse response = navitiaSDK.getEndpoints().getPlacesApi().getPlaces(q, type, count, searchType, adminUri, depth, disableGeojson, from, shape);

        assertEquals("Capdenac-Gare", response.getPlaces().get(0).getName());
    }

    @Test
    public void shouldRetrieveEndpointPlacesResultsGivenValidConfigurationWithGeneratedAsyncRequester() throws Exception {
        NavitiaSDK navitiaSDK = new NavitiaSDK(new NavitiaConfiguration("9e304161-bb97-4210-b13d-c71eaf58961c"));

        String q = "gare";
        List<String> type = null;
        Integer count = 10;
        Integer searchType = null;
        List<String> adminUri = null;
        Integer depth = null;
        Boolean disableGeojson = null;
        String from = null;
        String shape = null;

        final String[] asyncResult = new String[1];
        Call placesCall = navitiaSDK.getEndpoints().getPlacesApi().getPlacesAsync(q, type, count, searchType, adminUri, depth, disableGeojson, from, shape, new ApiCallback<PlacesResponse>() {
            @Override
            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) { }

            @Override
            public void onSuccess(PlacesResponse result, int statusCode, Map<String, List<String>> responseHeaders) {
                asyncResult[0] = result.getPlaces().get(0).getName();
                synchronized (asyncResult) {
                    asyncResult.notify();
                }
            }

            @Override
            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) { }

            @Override
            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) { }
        });

        synchronized (asyncResult) {
            asyncResult.wait();
        }
        assertEquals("Capdenac-Gare", asyncResult[0]);
    }

    @Test
    public void shouldRetrieveEndpointPlacesResultsGivenValidConfigurationWithGeneratedSyncFluentRequester() throws Exception {
        NavitiaSDK navitiaSDK = new NavitiaSDK(new NavitiaConfiguration("9e304161-bb97-4210-b13d-c71eaf58961c"));

        PlacesResponse response = navitiaSDK.getEndpoints().getPlacesApi().getPlacesNewFluentRequester().with().q("gare").count(10).execute();

        assertEquals("Capdenac-Gare", response.getPlaces().get(0).getName());
    }

    @Test
    public void shouldRetrieveEndpointPlacesResultsGivenValidConfigurationWithGeneratedAsyncFluentRequester() throws Exception {
        NavitiaSDK navitiaSDK = new NavitiaSDK(new NavitiaConfiguration("9e304161-bb97-4210-b13d-c71eaf58961c"));

        final String[] asyncResult = new String[1];
        Call placesCall = navitiaSDK.getEndpoints().getPlacesApi().getPlacesNewFluentRequester().with().q("gare").count(10).executeAsync(new ApiCallback<PlacesResponse>() {
            @Override
            public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) { }

            @Override
            public void onSuccess(PlacesResponse result, int statusCode, Map<String, List<String>> responseHeaders) {
                asyncResult[0] = result.getPlaces().get(0).getName();
                synchronized (asyncResult) {
                    asyncResult.notify();
                }
            }

            @Override
            public void onUploadProgress(long bytesWritten, long contentLength, boolean done) { }

            @Override
            public void onDownloadProgress(long bytesRead, long contentLength, boolean done) { }
        });

        synchronized (asyncResult) {
            asyncResult.wait();
        }
        assertEquals("Capdenac-Gare", asyncResult[0]);
    }
}